{
  "assertion": {
    "assert():any": "assert( ${1:expression}, ${2:message} )",
    "between():any": "between( ${1:actual}, ${2:min}, ${3:max}, ${4:message} )",
    "closeTo():any": "closeTo( ${1:expected}, ${2:actual}, ${3:delta}, ${4:datePart}, ${5:message} )",
    "deepKey():any": "deepKey( ${1:target}, ${2:key}, ${3:message} )",
    "fail():any": "fail( ${1:message} )",
    "getStringName():any": "getStringName( ${1:obj} )",
    "includes():any": "includes( ${1:target}, ${2:needle}, ${3:message} )",
    "includesWithCase():any": "includesWithCase( ${1:target}, ${2:needle}, ${3:message} )",
    "instanceOf():any": "instanceOf( ${1:actual}, ${2:typeName}, ${3:message} )",
    "isEmpty():any": "isEmpty( ${1:target}, ${2:message} )",
    "isEqual():any": "isEqual( ${1:expected}, ${2:actual}, ${3:message} )",
    "isEqualWithCase():any": "isEqualWithCase( ${1:expected}, ${2:actual}, ${3:message} )",
    "isFalse():any": "isFalse( ${1:actual}, ${2:message} )",
    "isGT():any": "isGT( ${1:actual}, ${2:target}, ${3:message} )",
    "isGTE():any": "isGTE( ${1:actual}, ${2:target}, ${3:message} )",
    "isLT():any": "isLT( ${1:actual}, ${2:target}, ${3:message} )",
    "isLTE():any": "isLTE( ${1:actual}, ${2:target}, ${3:message} )",
    "isNotEmpty():any": "isNotEmpty( ${1:target}, ${2:message} )",
    "isNotEqual():any": "isNotEqual( ${1:expected}, ${2:actual}, ${3:message} )",
    "isNotSameInstance():any": "isNotSameInstance( ${1:expected}, ${2:actual}, ${3:message} )",
    "isSameInstance():any": "isSameInstance( ${1:expected}, ${2:actual}, ${3:message} )",
    "isTrue():any": "isTrue( ${1:actual}, ${2:message} )",
    "key():any": "key( ${1:target}, ${2:key}, ${3:message} )",
    "lengthOf():any": "lengthOf( ${1:target}, ${2:length}, ${3:message} )",
    "match():any": "match( ${1:actual}, ${2:regex}, ${3:message} )",
    "matchWithCase():any": "matchWithCase( ${1:actual}, ${2:regex}, ${3:message} )",
    "notDeepKey():any": "notDeepKey( ${1:target}, ${2:key}, ${3:message} )",
    "notIncludes():any": "notIncludes( ${1:target}, ${2:needle}, ${3:message} )",
    "notIncludesWithCase():any": "notIncludesWithCase( ${1:target}, ${2:needle}, ${3:message} )",
    "notInstanceOf():any": "notInstanceOf( ${1:actual}, ${2:typeName}, ${3:message} )",
    "notKey():any": "notKey( ${1:target}, ${2:key}, ${3:message} )",
    "notLengthOf():any": "notLengthOf( ${1:target}, ${2:length}, ${3:message} )",
    "notMatch():any": "notMatch( ${1:actual}, ${2:regex}, ${3:message} )",
    "notNull():any": "notNull( ${1:actual}, ${2:message} )",
    "notThrows():any": "notThrows( ${1:target}, ${2:type}, ${3:regex}, ${4:message} )",
    "notTypeOf():any": "notTypeOf( ${1:type}, ${2:actual}, ${3:message} )",
    "null():any": "null( ${1:actual}, ${2:message} )",
    "throws():any": "throws( ${1:target}, ${2:type}, ${3:regex}, ${4:message} )",
    "typeOf():any": "typeOf( ${1:type}, ${2:actual}, ${3:message} )"
  },
  "basespec": {
    "addAssertions():any": "addAssertions( ${1:assertions} )",
    "addMatchers():any": "addMatchers( ${1:matchers} )",
    "afterEach():any": "afterEach( function() {\n\t$0\n} );",
    "aroundEach():any": "aroundEach( function() {\n\t$0\n} );",
    "assert():any": "assert( ${1:expression}, ${2:message} )",
    "beforeEach():any": "beforeEach( function() {\n\t$0\n} );",
    "clearDebugBuffer():any": "clearDebugBuffer()",
    "closureStub():any": "closureStub()",
    "console():any": "console( ${1:var}, ${2:top} )",
    "createEmptyMock():any": "createEmptyMock( ${1:className}, ${2:object}, ${3:callLogging} )",
    "createMock():any": "createMock( ${1:className}, ${2:object}, ${3:clearMethods} )",
    "createStub():any": "createStub( ${1:callLogging}, ${2:extends}, ${3:implements} )",
    "debug():any": "debug( ${1:var}, ${2:label}, ${3:deepCopy}, ${4:top} )",
    "describe():any": "describe( \"${1:title}\", function() {\n\t$0\n} );",
    "expect():Expectation": "expect( ${1:actual} )",
    "expectedException():any": "expectedException( ${1:type}, ${2:regex} )",
    "fail():any": "fail( ${1:message} )",
    "feature():any": "feature( \"${1:feature}\", function() {\n\t$0\n} );",
    "getDebugBuffer():array": "getDebugBuffer()",
    "getMockBox():any": "getMockBox( ${1:generationPath} )",
    "getProperty():any": "getProperty( ${1:target}, ${2:name}, ${3:scope}, ${4:defaultValue} )",
    "given():any": "given( \"${1:given}\", function() {\n\t$0\n} );",
    "hasExpectedException():boolean": "hasExpectedException( ${1:specName}, ${2:runner} )",
    "isExpectedException():boolean": "isExpectedException( ${1:exception}, ${2:specName}, ${3:runner} )",
    "it():any": "it( \"${1:title}\", function() {\n\t$0\n} );",
    "makePublic():any": "makePublic( ${1:target}, ${2:method}, ${3:newName} )",
    "prepareMock():any": "prepareMock( ${1:object}, ${2:callLogging} )",
    "print():any": "print( ${1:message} )",
    "println():any": "println( ${1:message} )",
    "querySim():any": "querySim( ${1:queryData} )",
    "runAfterEachClosures():BaseSpec": "runAfterEachClosures( ${1:suite}, ${2:spec} )",
    "runAroundEachClosures():BaseSpec": "runAroundEachClosures( ${1:suite}, ${2:spec} )",
    "runBeforeEachClosures():BaseSpec": "runBeforeEachClosures( ${1:suite}, ${2:spec} )",
    "runSpec():any": "runSpec( ${1:spec}, ${2:suite}, ${3:testResults}, ${4:suiteStats}, ${5:runner} )",
    "runTestMethod():any": "runTestMethod( ${1:spec}, ${2:testResults}, ${3:suiteStats}, ${4:runner} )",
    "scenario():any": "scenario( \"${1:scenario}\", function() {\n\t$0\n} );",
    "story():any": "story( \"${1:story}\", function() {\n\t$0\n} );",
    "then():any": "then( \"${1:then}\", function() {\n\t$0\n} );",
    "when():any": "when( \"${1:when}\", function() {\n\t$0\n} );",
    "xdescribe():any": "xdescribe( \"${1:title}\", function() {\n\t$0\n} );",
    "xit():any": "xit( \"${1:title}\", function() {\n\t$0\n} );"
  },
  "expectation": {
    "toBe():Expectation": "toBe( ${1:expected}, ${2:message} )",
    "toBeBetween():Expectation": "toBeBetween( ${1:min}, ${2:max}, ${3:message} )",
    "toBeCloseTo():Expectation": "toBeCloseTo( ${1:expected}, ${2:delta}, ${3:datePart}, ${4:message} )",
    "toBeEmpty():Expectation": "toBeEmpty( ${1:message} )",
    "toBeFalse():Expectation": "toBeFalse( ${1:message} )",
    "toBeGT():Expectation": "toBeGT( ${1:target}, ${2:message} )",
    "toBeGTE():Expectation": "toBeGTE( ${1:target}, ${2:message} )",
    "toBeInstanceOf():Expectation": "toBeInstanceOf( ${1:typeName}, ${2:message} )",
    "toBeLT():Expectation": "toBeLT( ${1:target}, ${2:message} )",
    "toBeLTE():Expectation": "toBeLTE( ${1:target}, ${2:message} )",
    "toBeNull():Expectation": "toBeNull( ${1:message} )",
    "toBeTrue():Expectation": "toBeTrue( ${1:message} )",
    "toBeTypeOf():Expectation": "toBeTypeOf( ${1:type}, ${2:message} )",
    "toBeWithCase():Expectation": "toBeWithCase( ${1:expected}, ${2:message} )",
    "toHaveDeepKey():Expectation": "toHaveDeepKey( ${1:key}, ${2:message} )",
    "toHaveKey():Expectation": "toHaveKey( ${1:key}, ${2:message} )",
    "toHaveLength():Expectation": "toHaveLength( ${1:length}, ${2:message} )",
    "toInclude():Expectation": "toInclude( ${1:needle}, ${2:message} )",
    "toIncludeWithCase():Expectation": "toIncludeWithCase( ${1:needle}, ${2:message} )",
    "toMatch():Expectation": "toMatch( ${1:regex}, ${2:message} )",
    "toMatchWithCase():Expectation": "toMatchWithCase( ${1:actual}, ${2:regex}, ${3:message} )",
    "toThrow():Expectation": "toThrow( ${1:type}, ${2:regex}, ${3:message} )"
  }
}