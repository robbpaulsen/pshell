%YAML 1.2
%TAG ! tag:yaml-macros:CFML.syntaxes.macros.cfml_macros:
---
# Acknowledgments
#
# SublimeText ColdFusion:
#   https://github.com/SublimeText/ColdFusion
# JavaScript Next:
#   https://github.com/Benvie/JavaScriptNext.tmLanguage
# Default JavaScript syntax:
#   https://github.com/sublimehq/Packages/blob/master/JavaScript/JavaScript.sublime-syntax
#   Thank you Will Bond (@wbond) and Thomas Smith (@Thom1729)
#   for an awesome syntax to base this on.

name: CFML Script
scope: source.cfml.script
hidden: true
variables:
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
  dot_path_identifier: '[_$[:alpha:]][_$[:alnum:].]*'
  constant_identifier: '[[:upper:]][_$[:digit:][:upper:]]*\b'
  attribute_name: '[_[:alpha:]][[:alnum:]_\-:]*'
  arrow_func_lookahead: '\s*(?:{{identifier}}|\([^()]*?\))\s*=>'
  param_attributes: '\b(name|default|max|maxLength|min|pattern|type)\b'
  storage_modifier: '\b(private|package|public|remote|static|final|abstract)\b'
  storage_types: '\b(?:any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid)\b'
  func_assignment_lookahead: '\s*\bfunction\b'
  func_lookahead: '({{storage_modifier}}\s+)?({{storage_modifier}}\s+)?({{dot_path_identifier}}(\[\])?\s+)?\bfunction\b'

  sql_lookahead: >-
    (?x:
      (?i:select\s+($|\*|top\b|{{dot_path_identifier}}\s*(?:(?:\s+as\s+{{identifier}}\s*)?,|$|\s+from)))|
      (?i:from\s+($|{{dot_path_identifier}}(?:\s*{{identifier}})?\s*$))|
      (?i:where\s+($|{{dot_path_identifier}}\s*=))|
      (?i:(?:left\s+)?(?:outer\s+|inner\s+)?join(\s+|\s*$))|
      (?i:(?:order|group)\s+by\s+($|{{dot_path_identifier}}\s*(?:,|$)))|
      (?:SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|REPLACE|ALTER|WITH|DECLARE|FROM|WHERE|AND|ORDER BY|GROUP BY|INNER JOIN|OUTER JOIN|LEFT JOIN|TRUNCATE TABLE|BULK INSERT)
    )

  line_continuation_lookahead: >-
    (?x:(?=
      \s*
      (?! \+\+ | -- )
      (?=
        != |
        [-+*/%><=&|^\[(;,.:?] |
        (?i:in|mod|gt|gte|lt|lte|and|or|xor|eqv|imp)\b
      )
    ))

contexts:
  prototype:
    - include: comments

  main:
    - include: comments
    - include: keywords-top-level
    - include: component
    - include: statements

  else-pop:
    - match: (?=\S)
      pop: true

  immediately-pop:
    - match: (?=.|\n)
      pop: true

  comments:
    - match: /\*\*(?!/|\*)
      scope: punctuation.definition.comment.cfml
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.documentation.cfml
        - match: \*/
          scope: punctuation.definition.comment.cfml
          pop: true
        - match: ^\s*\*?\s*((\@)\S*)\s
          captures:
            1: keyword.other.documentation.cfml
            2: punctuation.definition.keyword.cfml
          push: cfmldoc
        - match: ^\s*(\*(?!/))?\s*(?=\w)
          push: cfmldoc
    - match: /\*
      scope: punctuation.definition.comment.cfml
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.cfml
        - match: \*/
          scope: punctuation.definition.comment.cfml
          pop: true
    - match: //
      scope: punctuation.definition.comment.cfml
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.double-slash.cfml
        - match: \n
          pop: true
    - include: scope:embedding.cfml#comments

  cfmldoc:
    - meta_content_scope: text.html
    - match: (\n|(?=\*/))
      pop: true
    - include: scope:text.html.basic

  keywords-top-level:
    - match: \bimport\b
      scope: keyword.control.import.cfml
      push:
        - meta_scope: meta.import.cfml
        - match: '(?=\n|;)'
          pop: true
        - include: string
        - match: '{{identifier}}'
          scope: variable.other.readwrite.cfml
        - match: '\*'
          scope: constant.other.cfml
        - include: else-pop

  component:
    - match: (?i)^\s*(?:(abstract|final)\s+)?(component)\b
      captures:
        1: storage.modifier.cfml
        2: storage.type.class.cfml
      push:
        - - !block ['set', 'meta.class.body.cfml']
        - - meta_scope: meta.class.declaration.cfml
          - match: (?=\{)
            pop: true
          - include: scope:embedding.cfml#cfcomponent-attributes
    - match: (?i)^\s*(interface)\b
      captures:
        1: storage.type.interface.cfml
      push:
        - - !block ['set', 'meta.interface.body.cfml']
        - - meta_scope: meta.interface.declaration.cfml
          - match: (?=\{)
            pop: true
          - include: scope:embedding.cfml#cfcomponent-attributes

  statements:
    - match: '```'
      scope: punctuation.definition.raw.code-fence.begin.cfml
      embed: scope:embedding.cfml#html
      embed_scope: text.html.cfml
      escape: '```'
      escape_captures:
        0: punctuation.definition.raw.code-fence.end.cfml
    - match: ';'
      scope: punctuation.terminator.statement.cfml
    - include: conditional
    - include: static
    - match: (?=\{)
      push: block-scope
    - include: variable-declaration
    - include: keywords
    - include: tag-in-script
    - include: tag-in-script-cf
    - match: (?={{func_lookahead}})
      push: function-declaration
    - include: expression-statement-push

  conditional:
    - match: \bswitch\b
      scope: keyword.control.switch.cfml
      push:
        - !meta meta.switch.cfml
        - - match: '\{'
            scope: punctuation.section.block.begin.cfml
            set:
              - meta_scope: meta.block.cfml
              - match: '\}'
                scope: punctuation.section.block.end.cfml
                pop: true
              - match: \b(case)\b
                scope: keyword.control.switch.cfml
                push:
                  - expect-case-colon
                  - expression
              - match: \b(default)\b
                scope: keyword.control.switch.cfml
                push:
                  - expect-case-colon
              - include: statements
          - include: else-pop
        - !expect_context parenthesized-expression

    - match: \bdo\b
      scope: keyword.control.loop.cfml
      push:
        - !meta meta.do-while.cfml
        - !expect_context parens-scope
        - !expect [ 'while', 'keyword.control.loop.cfml' ]
        - !expect_context block-scope

    - !keyword_control [ 'for', 'loop', 'for', 'parens-block' ]
    - !keyword_control [ 'while', 'loop', 'while', 'parens-block' ]
    - !keyword_control [ 'else\s+if|if', 'conditional', 'conditional', 'parens-block' ]
    - !keyword_control [ 'else', 'conditional', 'conditional', 'block' ]
    - !keyword_control [ 'try', 'trycatch', 'try', 'block' ]
    - !keyword_control [ 'finally', 'trycatch', 'finally', 'block' ]
    - !keyword_control [ 'catch', 'trycatch', 'catch', 'catch-block' ]

  expect-case-colon:
    - match: ':'
      scope: punctuation.separator.cfml
      pop: true
    - include: else-pop

  parens-scope:
    - match: '\('
      scope: punctuation.section.group.begin.cfml
      set:
        - meta_scope: meta.group.cfml
        - match: '\)'
          scope: punctuation.section.group.end.cfml
          pop: true
        - match: \;
          scope: punctuation.terminator.statement.cfml
        - include: variable-declaration
        - include: expression-push
    - include: else-pop

  catch-scope:
    - match: '\('
      scope: punctuation.section.group.begin.cfml
      set:
        - - meta_scope: meta.group.cfml
          - match: '\)'
            scope: punctuation.section.group.end.cfml
            pop: true
        - - match: '(?:({{dot_path_identifier}})\s+)?(?i:(var)\s+)?({{identifier}})'
            captures:
              1: support.type.exception.cfml
              2: storage.type.cfml
              3: variable.other.readwrite.cfml
            pop: true
          - include: else-pop
    - include: else-pop

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.cfml
      set:
        - meta_scope: meta.group.cfml
        - match: \)
          scope: punctuation.section.group.end.cfml
          pop: true
        - include: expression-push
    - match: \)
      scope: invalid.illegal.stray.brace.round.cfml
      pop: true

  function-call:
    - match: \(
      scope: punctuation.section.group.begin.cfml
      push:
        - meta_scope: meta.group.cfml
        - match: \)
          scope: punctuation.section.group.end.cfml
          pop: true
        - include: expression-push

  block-scope:
    - !block ['set', 'meta.block.cfml']
    - include: else-pop

  static:
    - match: \bstatic\b(?=\s*[\n\{])
      scope: keyword.control.static.cfml
      push:
        - !meta meta.block.static.cfml
        - - include: block-scope

  expression:
    - match: (?=\S)
      set: [ expression-end, expression-begin ]

  expression-statement:
    - match: (?=\S)
      set: [ expression-statement-end, expression-begin ]

  expression-no-comma:
    - match: (?=\S)
      set: [ expression-end-no-comma, expression-begin ]

  expression-push:
    - match: (?=\S)
      push: [ expression-end, expression-begin ]

  expression-statement-push:
    - match: (?=\S)
      push: [ expression-statement-end, expression-begin ]

  expression-no-comma-push:
    - match: (?=\S)
      push: [ expression-end-no-comma, expression-begin ]

  expression-end:
    - include: expression-break
    - include: postfix-operators
    - include: binary-operators
    - include: ternary-operator
    - include: property-access
    - include: function-call
    - include: fallthrough
    - include: else-pop

  expression-end-no-comma:
    - match: (?=,)
      pop: true
    - include: expression-end

  expression-statement-end:
    - match: \n
      set:
        - match: '{{line_continuation_lookahead}}'
          set: expression-statement-end
        - include: else-pop
    - include: expression-end

  expression-break:
    - match: (?=[;})\]])
      pop: true
    - match: (?i)(?=</cfscript>)
      pop: true

  expression-begin:
    - match: \)
      scope: invalid.illegal.stray-brace-end.cfml
      pop: true
    - include: expression-break
    - include: string
    - include: constructor
    - include: prefix-operators
    - include: constants
    - include: function-assignment
    - include: anonymous-function
    - include: struct-literal
    - include: parenthesized-expression
    - include: array-literal
    - include: number
    - include: call
    - include: variable
    - include: scope:embedding.cfml#string-template-expression
    - include: else-pop

  restricted-production:
    - match: \n
      pop: true
    - match: (?=\S)
      set: expression-statement

  fallthrough:
    # If an arrow function has the ( and ) on different lines, we won't have matched
    - match: '=>'
      scope: storage.type.function.arrow.cfml

  string:
    - match: "'"
      scope: punctuation.definition.string.begin.cfml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
        - match: (?={{sql_lookahead}})
          set: string-sql-single
        - match: (?=\S)
          set: string-single
    - match: '"'
      scope: punctuation.definition.string.begin.cfml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
        - match: (?={{sql_lookahead}})
          set: string-sql-double
        - match: (?=\S)
          set: string-double

  string-single:
    - meta_include_prototype: false
    - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
    - match: "''"
      scope: constant.character.escape.quote.cfml
    - match: "'"
      scope: punctuation.definition.string.end.cfml
      pop: true
    - include: scope:embedding.cfml#string-template-expression

  string-sql-single:
    - meta_include_prototype: false
    - meta_scope: meta.string.quoted.single.cfml
    - match: "'"
      scope: string.quoted.single.cfml punctuation.definition.string.end.cfml
      pop: true
    - match: (?={{sql_lookahead}})
      push: scope:source.sql
      with_prototype:
        - match: "''"
          scope: constant.character.escape.quote.cfml
        - match: (?=')
          pop: true
        - include: scope:embedding.cfml#sql-character-escape
        - include: scope:embedding.cfml#sql-template-expression

  string-double:
    - meta_include_prototype: false
    - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
    - match: '""'
      scope: constant.character.escape.quote.cfml
    - match: '"'
      scope: punctuation.definition.string.end.cfml
      pop: true
    - include: scope:embedding.cfml#string-template-expression

  string-sql-double:
    - meta_include_prototype: false
    - meta_scope: meta.string.quoted.double.cfml
    - match: '"'
      scope: string.quoted.double.cfml punctuation.definition.string.end.cfml
      pop: true
    - match: (?={{sql_lookahead}})
      push: scope:source.sql
      with_prototype:
        - match: '""'
          scope: constant.character.escape.quote.cfml
        - match: (?=")
          pop: true
        - include: scope:embedding.cfml#sql-character-escape
        - include: scope:embedding.cfml#sql-template-expression

  constructor:
    - match: '\bnew\b'
      scope: keyword.operator.word.new.cfml
      set:
        - !meta meta.instance.constructor.cfml
        - !function_call_params
          meta_scope: meta.function-call.parameters.method.cfml
          named_param_scope: entity.other.method-parameter.cfml
          delimiter_scope: punctuation.separator.function-call.method.cfml
        - - match: '\b\d*{{identifier}}\b(\.)?'
            scope: entity.name.class.cfml
          - include: else-pop

  prefix-operators:
    - match: '!(?!=)'
      scope: keyword.operator.logical.prefix.cfml
    - match: \b(?i:not)\b
      scope: keyword.operator.logical.prefix.cfml
    - match: '--'
      scope: keyword.operator.arithmetic.prefix.cfml
    - match: '\+\+'
      scope: keyword.operator.arithmetic.prefix.cfml
    - match: \+|\-
      scope: keyword.operator.arithmetic.prefix.cfml
    - match: \bnew\b
      scope: keyword.operator.word.new.prefix.cfml

  binary-operators:
    - match: \b(?i:in)\b
      scope: keyword.operator.binary.cfml
      push: expression-begin
    - match: '&&|\|\|'
      scope: keyword.operator.logical.binary.cfml
      push: expression-begin
    - match: \b(?i:(and|or|xor|eqv|imp))\b
      scope: keyword.operator.logical.binary.cfml
      push: expression-begin
    - match: '=(?![=>])'
      scope: keyword.operator.assignment.binary.cfml
      push: expression-begin
    - match: |-
        (?x)
        %=   | # assignment      right-to-left   both
        &=   | # assignment      right-to-left   both
        \*=  | # assignment      right-to-left   both
        \+=  | # assignment      right-to-left   both
        -=   | # assignment      right-to-left   both
        /=     # assignment      right-to-left   both
      scope: keyword.operator.assignment.augmented.binary.cfml
      push: expression-begin
    - match: '&'
      scope: keyword.operator.concat.binary.cfml
      push: expression-begin
    - match: |-
        (?x)
        ===  | # equality        left-to-right   both
        !==  | # equality        left-to-right   both
        ==   | # equality        left-to-right   both
        \b(?i:neq|is\s+not)\b |
        !=   |  # equality        left-to-right   both
        <>   |  # equality        left-to-right   both
        \b(?i:eq|is)\b
      scope: keyword.operator.comparison.binary.cfml
      push: expression-begin
    - match: |-
        (?x)
        <=   | # relational      left-to-right   both
        \b(?i:(lte|le|less\s+than\s+or\s+equal\s+to))\b |
        >=   | # relational      left-to-right   both
        \b(?i:(gte|ge|greater\s+than\s+or\s+equal\s+to))\b |
        <    | # relational      left-to-right   both
        \b(?i:(lt|less\s+than\s))\b |
        >    | # relational      left-to-right   both
        \b(?i:(gt|greater\s+than\s))\b
      scope: keyword.operator.relational.binary.cfml
      push: expression-begin
    - match: \b(?i:(contains|does\s+not\s+contain))\b
      scope: keyword.operator.decision.binary.cfml
      push: expression-begin
    - match: \b(?i:mod)\b
      scope: keyword.operator.arithmetic.binary.cfml
      push: expression-begin
    - match: |-
        (?x)
        /    | # division        left-to-right   both
        %    | # modulus         left-to-right   both
        \*   | # multiplication  left-to-right   both
        \+   | # addition        left-to-right   both
        -      # subtraction     left-to-right   both
      scope: keyword.operator.arithmetic.binary.cfml
      push: expression-begin
    - match: ','
      scope: punctuation.separator.comma.cfml
      push: expression-begin

  ternary-operator:
    - match: '\?(?!\.)'
      scope: keyword.operator.ternary.cfml
      set:
        - - match: ':'
            scope: keyword.operator.ternary.cfml
            set: expression-no-comma
          - include: else-pop
        - expression-no-comma

  postfix-operators:
    - match: '--'
      scope: keyword.operator.arithmetic.postfix.cfml
    - match: '\+\+'
      scope: keyword.operator.arithmetic.postfix.cfml

  variable-declaration:
    - match: \bvar\b
      scope: storage.type.cfml
      push: expression-statement

  keywords:
    - match: \b(throw|rethrow)\b(?!\s*\()
      scope: keyword.control.trycatch.cfml
      push: restricted-production
    - match: \b(break|continue)\b
      scope: keyword.control.loop.cfml
    - match: \b(abort)\b
      scope: keyword.control.flow.cfml
    - match: \b(return)\b
      scope: keyword.control.flow.cfml
      push: restricted-production
    - match: \b(include)\b(?!\s+(?:template|runeonce)=)
      scope: keyword.control.flow.cfml
      push: restricted-production

  constants:
    - match: \btrue\b
      scope: constant.language.boolean.true.cfml
      pop: true
    - match: \bfalse\b
      scope: constant.language.boolean.false.cfml
      pop: true
    - match: \bnull\b
      scope: constant.language.null.cfml
      pop: true

  function-assignment:
    - match: '(?=(({{identifier}})\s*(\??\.)\s*)+({{identifier}})\s*(=)\s*({{func_assignment_lookahead}}|{{arrow_func_lookahead}}))'
      set:
        - meta_scope: meta.function.declaration.cfml
        - include: either-function-declaration
        - include: function-declaration-identifiers
    - match: '(?=({{identifier}})\s*(=)\s*({{func_assignment_lookahead}}|{{arrow_func_lookahead}}))'
      set:
        - meta_scope: meta.function.declaration.cfml
        - include: either-function-declaration
        - match: '{{constant_identifier}}'
          scope: variable.other.constant.cfml entity.name.function.cfml
        - match: '{{identifier}}'
          scope: variable.other.readwrite.cfml entity.name.function.cfml
        - match: '='
          scope: keyword.operator.assignment.binary.cfml

  function-declaration-identifiers:
    - match: '(?={{identifier}}\s*\??\.)'
      push:
        - - match: '\?\.'
            scope: punctuation.accessor.safe.cfml
            pop: true
          - match: '\.'
            scope: punctuation.accessor.cfml
            pop: true
        - - include: cfml-scopes
          - match: '{{identifier}}'
            scope: support.class.cfml
            pop: true
    - include: function-declaration-final-identifier

  function-declaration-final-identifier:
    - match: '({{identifier}})\s*(=)'
      captures:
        1: meta.property.cfml entity.name.function.cfml
        2: keyword.operator.assignment.binary.cfml

  anonymous-function:
    - match: '(?={{func_assignment_lookahead}}|{{arrow_func_lookahead}})'
      set:
        - !meta meta.function.anonymous.cfml
        - - include: either-function-declaration

  either-function-declaration:
    - match: '(?={{func_assignment_lookahead}})'
      set: function-declaration
    - match: '(?={{arrow_func_lookahead}})'
      set: arrow-function-declaration

  function-declaration:
    - match: (?=.)
      set:
        - !expect_context function-block
        - !meta meta.function.declaration.cfml
        - !expect_context [ 'scope:embedding.cfml#tag-generic-attribute', '[;{]' ]
        - !expect_context function-declaration-parameters
        - !expect [ '{{identifier}}', 'entity.name.function.cfml', 'exclude_boundaries' ]
        # waiting on the fix for https://github.com/SublimeTextIssues/Core/issues/1190 to make it out of dev
        # - !expect [ 'function', 'storage.type.function.cfml' ]
        # - !expect_context function-return-types
        # - - match: (?i)({{storage_modifier}})(\s+({{storage_modifier}}))?
        #     captures:
        #       1: storage.modifier.cfml
        #       4: storage.modifier.cfml # why is this group 4?
        #     pop: true
        #   - include: else-pop
        - - match: (?i)\bfunction\b(?!{{func_assignment_lookahead}})
            scope: storage.type.function.cfml
            pop: true
          - match: (?i){{storage_modifier}}
            scope: storage.modifier.cfml
          - match: '(?=[_$[:alpha:]])'
            push: storage-types

  arrow-function-declaration:
    - match: (?=.)
      set:
        - - include: function-block
          - match: (?=\S)
            set:
              - !meta meta.function.body.cfml
              - - match: (?=,)
                  pop: true
                - include: expression-statement-end
              - expression-begin
        - !meta meta.function.declaration.cfml
        - - match: '=>'
            scope: storage.type.function.arrow.cfml
            pop: true
          - include: else-pop
        - !expect_context arrow-function-parameters

  arrow-function-parameters:
    - match: '{{identifier}}'
      scope: variable.parameter.function.cfml
      pop: true
    - include: function-declaration-parameters
    - include: else-pop

  function-return-types:
    - match: (?i)(?=\bfunction\b(?!{{func_assignment_lookahead}}))
      pop: true
    - include: storage-types

  function-block:
    - !block [ 'set', 'meta.function.body.cfml' ]

  function-declaration-parameters:
    - match: \(
      scope: punctuation.section.parameters.begin.cfml
      set:
        - meta_scope: meta.function.parameters.cfml
        - match: \)
          scope: punctuation.section.parameters.end.cfml
          pop: true
        - match: ','
          scope: punctuation.separator.parameter.function.cfml
        - match: (?i)\brequired\b
          scope: keyword.other.required.parameter.cfml
        - match: (?:({{dot_path_identifier}})\s+)?({{identifier}})
          captures:
            1: storage.type.cfml
            2: variable.parameter.function.cfml
          push:
            - !expect_context [ 'scope:embedding.cfml#tag-generic-attribute', '[,)]' ]
            - - match: '='
                scope: keyword.operator.assignment.binary.cfml
                set:
                  - !meta meta.parameter.optional.cfml
                  - expression-no-comma
              - include: else-pop

  storage-types:
    - match: '(?i){{storage_types}}'
      scope: storage.type.primitive.cfml
      pop: true
    - match: '(?i:\b(function)\b)'
      scope: storage.type.function.cfml
      pop: true
    - match: '(?i:\b(void)\b)'
      scope: storage.type.void.cfml
      pop: true
    - match: '(?i:\b({{dot_path_identifier}})\b)(\[)(\])'
      captures:
        1: storage.type.object.array.cfml
        2: meta.brackets.cfml punctuation.section.brackets.begin.cfml
        3: meta.brackets.cfml punctuation.section.brackets.end.cfml
      pop: true
    - match: '(?i:\b{{dot_path_identifier}}\b)'
      scope: storage.type.object.cfml
      pop: true

  struct-literal:
    - match: '\{'
      scope: punctuation.section.block.begin.cfml
      set:
        - meta_scope: meta.struct-literal.cfml
        - match: '\}'
          scope: punctuation.section.block.end.cfml
          pop: true
        - include: struct-contents
        - match: ','
          scope: punctuation.separator.struct-literal.cfml


  struct-contents:
    - match: "(?=('[^']*'|\"[^\"]*\"|{{identifier}})\\s*(:|=)({{func_assignment_lookahead}}|{{arrow_func_lookahead}}))"
      push:
        - !expect_context either-function-declaration
        - !meta meta.function.declaration.cfml
        - - match: '[:=]'
            scope: punctuation.separator.key-value.cfml
          - include: else-pop
        - !meta meta.struct-literal.key.cfml
        - method-name
    - match: "(?=\"|')"
      push:
        - !meta meta.struct-literal.key.cfml
        - string
    - match: '[_$[:alnum:]]+(?=\s*[:=])'
      scope: meta.struct-literal.key.cfml
    - match: '[:=]'
      scope: punctuation.separator.key-value.cfml
      push: expression-no-comma

  method-name:
    - match: '{{identifier}}'
      scope: entity.name.function.cfml
      pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.cfml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
        - meta_content_scope: entity.name.function.cfml
        - match: "'"
          scope: punctuation.definition.string.end.cfml
          pop: true
        - include: scope:embedding.cfml#string-template-expression
    - match: '"'
      scope: punctuation.definition.string.begin.cfml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
        - meta_content_scope: entity.name.function.cfml
        - match: '"'
          scope: punctuation.definition.string.end.cfml
          pop: true
        - include: scope:embedding.cfml#string-template-expression

  array-literal:
    - match: (?=\[)
      set:
        - !meta meta.sequence.cfml
        - - match: '\['
            scope: punctuation.section.brackets.begin.cfml
            set:
              - match: (?=('[^']*'|\"[^\"]*\"|[_$[:alnum:]]+)?\s*[:=][^:])
                set:
                  - match: '\]'
                    scope: punctuation.section.brackets.end.cfml
                    pop: true
                  - include: struct-contents
                  - match: ','
                    scope: punctuation.separator.sequence.cfml
              - match: (?=\S)
                set:
                  - match: '\]'
                    scope: punctuation.section.brackets.end.cfml
                    pop: true
                  - include: expression-break
                  - match: ','
                    scope: punctuation.separator.sequence.cfml
                  - include: expression-no-comma-push
        - - match: (?=\[[^\[\]]*?\]\s*\[)
            set: array-types
          - include: else-pop

  array-types:
    - match: '\['
      scope: punctuation.section.brackets.begin.cfml
      set:
        - - meta_scope: meta.brackets.cfml
          - match: '\]'
            scope: punctuation.section.brackets.end.cfml
            pop: true
          - include: expression-push
        - !arraytypes
    - include: else-pop

  property-access:
    - match: '\['
      scope: punctuation.section.brackets.begin.cfml
      push:
        - meta_scope: meta.brackets.cfml
        - match: '\]'
          scope: punctuation.section.brackets.end.cfml
          pop: true
        - include: expression-push
    - match: \?\.
      scope: punctuation.accessor.safe.cfml
      push:
        - match: '(?=({{identifier}})\s*(=)\s*({{func_assignment_lookahead}}|{{arrow_func_lookahead}}))'
          set:
            - meta_scope: meta.function.declaration.cfml
            - include: either-function-declaration
            - include: function-declaration-final-identifier
        - match: '(?={{identifier}}\s*\()'
          set: method-call
        - include: struct-property
    - match: \.
      scope: punctuation.accessor.cfml
      push:
        - match: '(?=({{identifier}})\s*(=)\s*({{func_assignment_lookahead}}|{{arrow_func_lookahead}}))'
          set:
            - meta_scope: meta.function.declaration.cfml
            - include: either-function-declaration
            - include: function-declaration-final-identifier
        - match: '(?={{identifier}}\s*\()'
          set: method-call
        - include: struct-property
    - match: '::'
      scope: punctuation.accessor.static.cfml
      push:
        - match: '(?=({{identifier}})\s*(=)\s*({{func_assignment_lookahead}}|{{arrow_func_lookahead}}))'
          set:
            - meta_scope: meta.function.declaration.cfml
            - include: either-function-declaration
            - include: function-declaration-final-identifier
        - match: '(?={{identifier}}\s*\()'
          set: static-method-call
        - include: struct-property

  number:
    - match: |-
        (?xi)
        (?:\B[-+])?
        (?:
          \b0x[0-9a-f]*|              # hex
          (
            \B\.[0-9]+|               # e.g. .999
            \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
          )
        )
      scope: constant.numeric.cfml
      pop: true

  call:
    - match: '(?i)(?={{identifier}}\s*\(|\barraynew\s*\[)'
      set:
        - include: support-call
        - match: '({{identifier}})(?=\s*\()'
          scope: variable.function.cfml
          set:
            - !meta meta.function-call.cfml
            - !function_call_params
              meta_scope: meta.function-call.parameters.cfml
              named_param_scope: entity.other.function-parameter.cfml
              delimiter_scope: punctuation.separator.function-call.cfml
    - match: '(?={{identifier}}\s*\??\.\s*{{identifier}}\s*\()'
      set:
        - match: '(?={{identifier}}\s*\??\.)'
          push:
            - - match: \?\.
                scope: punctuation.accessor.safe.cfml
                pop: true
              - match: \.
                scope: punctuation.accessor.cfml
                pop: true
            - - include: cfml-scopes
              - match: '{{identifier}}'
                scope: variable.other.object.cfml
                pop: true
        - include: method-call
        - match: '(?=[^ ])'
          pop: true
    - match: (?=\b[_.$[:alnum:]]+\s*::\s*{{identifier}}\s*\()
      set:
        - match: '\b{{identifier}}\.'
          scope: entity.name.class.cfml
        - match: '\b({{identifier}})(::)'
          captures:
            1: entity.name.class.cfml
            2: punctuation.accessor.static.cfml
        - include: static-method-call
        - match: (?=.)
          pop: true

  method-call:
    - include: support-method-call
    - match: '({{identifier}})\s*(?=\()'
      captures:
        1: variable.function.cfml
      set:
        - !meta meta.function-call.method.cfml
        - !function_call_params
          meta_scope: meta.function-call.parameters.method.cfml
          named_param_scope: entity.other.method-parameter.cfml
          delimiter_scope: punctuation.separator.function-call.method.cfml

  static-method-call:
    - match: '({{identifier}})\s*(?=\()'
      captures:
        1: variable.function.static.cfml
      set:
        - !meta meta.function-call.method.static.cfml
        - !function_call_params
          meta_scope: meta.function-call.parameters.method.cfml
          named_param_scope: entity.other.method-parameter.cfml
          delimiter_scope: punctuation.separator.function-call.method.cfml

  cfml-scopes:
    - match: \b(?i:super)\b
      scope: variable.language.super.cfml
      pop: true
    - match: \b(?i:this)\b
      scope: variable.language.this.cfml
      pop: true
    - match: \b(?i:thread)\b(?=[\[.])
      scope: variable.language.scope.cfml
      pop: true
    - match: |-
        (?x)
          \b(?i:(
          application|arguments|attributes|caller|cgi|client|cookie|flash|form|
          local|request|server|session|thistag|url|variables|self|static|argumentcollection
        ))\b
      scope: variable.language.scope.cfml
      pop: true

  variable:
    - include: cfml-scopes
    - match: '[_.$[:alnum:]]+(?=\s*::)'
      scope: entity.name.class.cfml
      pop: true
    - match: '{{identifier}}(?=\s*[\[\.])'
      scope: variable.other.struct.cfml
      pop: true
    - match: '{{constant_identifier}}'
      scope: variable.other.constant.cfml
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.cfml
      pop: true

  struct-property:
    - match: '{{constant_identifier}}'
      scope: meta.property.constant.cfml
      pop: true
    - match: '{{identifier}}'
      scope: meta.property.cfml
      pop: true
    - include: immediately-pop

  tag-in-script:
    - match: (?i)\bproperty\b(?=(\s+{{identifier}}\b|\s*[\n\{]))
      scope: entity.name.tag.script.cfml
      push:
        - - meta_scope: meta.tag.script.cfml meta.tag.property.cfml
          - match: (?=[;{])
            pop: true
          - include: scope:embedding.cfml#cfproperty-attributes
        - - match: ({{identifier}})\s+({{identifier}}\b)(?!\s*=)
            captures:
              1: storage.type.cfml
              2: meta.string.unquoted.cfml string.unquoted.cfml meta.tag.property.name.cfml
            pop: true
          - match: ({{identifier}}\b)(?!\s*=)
            captures:
              1: meta.string.unquoted.cfml string.unquoted.cfml meta.tag.property.name.cfml
            pop: true
          - include: else-pop

    - match: (?i)\bparam\b(?=(\s+{{identifier}}\b|\s*[\n\{]))
      scope: entity.name.tag.script.cfml
      push:
        - - meta_scope: meta.tag.script.cfml
          - match: (?=[;{])
            pop: true
          - include: tag-generic-attribute-script
        - - match: (?i)(?=(\s+{{param_attributes}}\s*=|\s*[{;\n]))
            pop: true
          - match: (?i)({{dot_path_identifier}})(?=\s+{{param_attributes}})
            captures:
              1: meta.string.unquoted.cfml string.unquoted.cfml
            pop: true
          - match: \b({{identifier}})\s+({{dot_path_identifier}})\b
            captures:
              1: storage.type.cfml
              2: meta.string.unquoted.cfml string.unquoted.cfml
            set:
              - match: '='
                scope: keyword.operator.assignment.binary.cfml
                set:
                  - !meta source.cfml.script
                  - expression
              - include: else-pop
          - match: \b{{dot_path_identifier}}\b
            scope: meta.string.unquoted.cfml string.unquoted.cfml
            set:
              - match: '='
                scope: keyword.operator.assignment.binary.cfml
                set:
                  - !meta source.cfml.script
                  - expression
              - include: else-pop
          - include: else-pop

    - match: (?i)\babort\b(?=(\s+{{identifier}}\b|\s*[\n\{;]))
      scope: entity.name.tag.script.cfml
      push:
        - meta_scope: meta.tag.script.cfml
        - match: (?=[;{])
          pop: true
        - include: tag-generic-attribute-script

    - match: !tags |-
        (?x)(?i)
            \b({tags})
            (?=\s+{{attribute_name}}\s*[=;{\n]|\s*[{\n])
      captures:
        1: entity.name.tag.script.cfml
      push:
        - meta_scope: meta.tag.script.cfml
        - match: (?=\.)
          pop: true
        - match: (?=;)
          pop: true
        - match: (?={)
          set: block-scope
        - include: tag-generic-attribute-script

  tag-generic-attribute-script:
    - match: \b{{attribute_name}}\b
      scope: entity.other.attribute-name.cfml
      push:
        - match: '='
          scope: punctuation.separator.key-value.cfml
          set:
            - - match: (?=#)
                set: scope:embedding.cfml#template-expression-set
              - match: (?=\S)
                set: expression

        - include: else-pop
    - match: \S
      scope: invalid.illegal.attribute-name.cfml

  tag-in-script-cf:
    - match: !tags |-
        (?x)(?i)cf(?:{tags})(?=\()
      scope: entity.name.tag.script.cfml
      push:
        - !meta meta.tag.script.cf.cfml
        - - match: '\('
            scope: punctuation.section.group.begin.cfml
            set:
              - meta_scope: meta.tag.script.cf.attributes.cfml
              - match: '\)'
                scope: punctuation.section.group.end.cfml
                pop: true
              - include: tag-generic-attribute-cf-script
          - include: else-pop

  tag-generic-attribute-cf-script:
    - match: ','
      scope: punctuation.separator.comma.cfml
    - match: \b{{attribute_name}}\b
      scope: entity.other.attribute-name.cfml
      push:
        - match: '[=:]'
          scope: punctuation.separator.key-value.cfml
          set: expression-no-comma
        - include: else-pop
    - match: \S
      scope: invalid.illegal.attribute-name.cfml

  support-call:
    - match: (?i)\b(createobject)(?=\((?:\s*type\s*=)?\s*[\"']component[\"']\s*,)
      captures:
        1: support.function.cfml
      set:
        - !meta meta.function-call.support.cfml meta.function-call.support.createcomponent.cfml
        - support-call-params
    - match: (?i)\b(createobject)(?=\((?:\s*type\s*=)?\s*[\"']java[\"']\s*,)
      captures:
        1: support.function.cfml
      set:
        - !meta meta.function-call.support.cfml meta.function-call.support.createjavaobject.cfml
        - support-call-params
    - match: (?i)\b(entity(?:load|loadbypk|new))(?=\()
      captures:
        1: support.function.cfml
      set:
        - !meta meta.function-call.support.cfml meta.function-call.support.entity.cfml
        - support-call-params
    - match: (?i)\b(arraynew)(?=\[)
      captures:
        1: support.function.cfml
      set:
        - !meta meta.function-call.support.cfml
        - support-call-params
        - array-types

    - match: !functions |-
        (?x)(?i)\b({functions})(?=\()
      captures:
        1: support.function.cfml
      set:
        - !meta meta.function-call.support.cfml
        - support-call-params

  support-call-params:
    !function_call_params
    meta_scope: meta.function-call.parameters.support.cfml
    named_param_scope: entity.other.function-parameter.cfml
    delimiter_scope: punctuation.separator.function-call.support.cfml

  support-method-call:
    - match: !member_functions |-
        (?x)(?i)\b({functions})(?=\()
      scope: support.function.member.cfml
      set:
        - !meta meta.function-call.method.support.cfml
        - !function_call_params
          meta_scope: meta.function-call.parameters.method.support.cfml
          named_param_scope: entity.other.method-parameter.cfml
          delimiter_scope: punctuation.separator.function-call.method.support.cfml
