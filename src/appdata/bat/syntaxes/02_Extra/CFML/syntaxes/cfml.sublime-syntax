%YAML 1.2
---
# Started with https://github.com/SublimeText/ColdFusion
name: CFML
file_extensions:
  - cfml
  - cfm
  - cfc
scope: embedding.cfml

variables:
  attribute_name: '[_[:alpha:]][[:alnum:]_\-:]*'

contexts:
  else-pop:
    - match: (?=\S)
      pop: true

  immediately-pop:
    - match: (?=.|\n)
      pop: true

  main:
    - match: (?i)(?=^\s*(/\*|//|import\b|(component|abstract\s*component|final\s*component|interface)(\s+|{)))
      push: scope:source.cfml.script
    - include: comments
    - match: (?i)(?=<cf(component|interface)\b)
      push:
        - meta_scope: source.cfml
        - include: cfcomponent
        - include: cfinterface
    - match: (?=\S)
      push:
        - meta_scope: text.html.cfml
        - include: html

  cfmltags:
    - include: comments
    - include: cffunction
    - include: cfoutput
    - include: cfmail
    - include: cfquery
    - include: tags-with-script
    - include: cfscript
    - include: cfproperty
    - include: cfargument
    - include: custom-tags
    - include: extension-tags
    - include: generic-tag

  html:
    - include: cffunction-end-invalid
    - match: (?=\S)
      push:
        - include: scope:text.html.basic
      with_prototype:
        - match: (?i)(?=</cffunction>)
          pop: true
        - include: cfmltags

  cfcomponent:
    - match: (?i)(<)(cfcomponent)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.class.cfml
      push:
        - meta_scope: meta.tag.cfml meta.class.cfml
        - match: '>'
          scope: punctuation.definition.tag.end.cfml
          set: cfcomponent-contents
        - include: cfcomponent-attributes

  cfcomponent-attributes:
    - match: (?i:\b(?:extends)\b)
      scope: entity.other.attribute-name.cfml storage.modifier.extends.cfml
      push:
        -   - meta_include_prototype: false
            - meta_scope: meta.class.inheritance.cfml
            - include: immediately-pop
        -   - match: '='
              scope: punctuation.separator.key-value.cfml
              set:
                - match: "'"
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
                        - match: "'"
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - meta_content_scope: entity.other.inherited-class.cfml
                        - match: "''"
                          scope: constant.character.escape.quote.cfml
                        - match: (?=')
                          pop: true
                - match: '"'
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
                        - match: '"'
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - meta_content_scope: entity.other.inherited-class.cfml
                        - match: '""'
                          scope: constant.character.escape.quote.cfml
                        - match: (?=")
                          pop: true
                - match: (?=[A-Za-z0-9\-_.$])
                  set:
                    -   - meta_scope: meta.string.unquoted.cfml string.unquoted.cfml
                        - include: immediately-pop
                    -   - meta_scope: entity.other.inherited-class.cfml
                        - match: (?=[^A-Za-z0-9\-_.$])
                          pop: true
                - include: else-pop
            - include: else-pop
    - include: tag-generic-attribute

  cfcomponent-contents:
    - meta_content_scope: meta.class.body.tag.cfml
    - match: (?i)(</)(cfcomponent)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.class.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true
    - include: cfmltags

  cfinterface:
    - match: (?i)(<)(cfinterface)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.interface.cfml
      push:
        - meta_scope: meta.tag.cfml meta.interface.cfml
        - match: '>'
          scope: punctuation.definition.tag.end.cfml
          set: cfinterface-contents
        - include: cfcomponent-attributes

  cfinterface-contents:
    - match: (?i)(</)(cfinterface)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.interface.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true
    - include: comments
    - include: cffunction

  cffunction:
    - match: (?i)(<)(cffunction)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.function.cfml
      push:
        - meta_scope: meta.tag.cfml meta.function.cfml
        - match: '>'
          scope: punctuation.definition.tag.end.cfml
          set:
            - meta_content_scope: meta.function.body.tag.cfml
            - include: cffunction-end-pop
            - include: html
        - match: (?i:\b(?:name)\b)
          scope: entity.other.attribute-name.cfml
          push:
            - match: '='
              scope: punctuation.separator.key-value.cfml
              set:
                - match: "'"
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
                        - match: "'"
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - meta_content_scope: entity.name.function.cfml
                        - match: "''"
                          scope: constant.character.escape.quote.cfml
                        - match: (?=')
                          pop: true
                - match: '"'
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
                        - match: '"'
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - meta_content_scope: entity.name.function.cfml
                        - match: '""'
                          scope: constant.character.escape.quote.cfml
                        - match: (?=")
                          pop: true
                - match: (?=[A-Za-z0-9\-_.$])
                  set:
                    -   - meta_scope: meta.string.unquoted.cfml string.unquoted.cfml
                        - include: immediately-pop
                    -   - meta_scope: entity.name.function.cfml
                        - match: (?=[^A-Za-z0-9\-_.$])
                          pop: true
                - include: else-pop
            - include: else-pop
        - match: (?i:\b(?:access)\b)
          scope: entity.other.attribute-name.cfml
          push:
            - match: '='
              scope: punctuation.separator.key-value.cfml
              set:
                - match: "'"
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
                        - match: "'"
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - meta_content_scope: storage.modifier.cfml
                        - match: "''"
                          scope: constant.character.escape.quote.cfml
                        - match: (?=')
                          pop: true
                - match: '"'
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
                        - match: '"'
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - meta_content_scope: storage.modifier.cfml
                        - match: '""'
                          scope: constant.character.escape.quote.cfml
                        - match: (?=")
                          pop: true
                - match: (?=[A-Za-z0-9\-_.$])
                  set:
                    -   - meta_scope: meta.string.unquoted.cfml string.unquoted.cfml
                        - include: immediately-pop
                    -   - meta_scope: storage.modifier.cfml
                        - match: (?=[^A-Za-z0-9\-_.$])
                          pop: true
                - include: else-pop
            - include: else-pop
        - match: (?i:\b(?:returntype)\b)
          scope: entity.other.attribute-name.cfml
          push:
            - match: '='
              scope: punctuation.separator.key-value.cfml
              set:
                - match: "'"
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
                        - match: "'"
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - include: scope:source.cfml.script#storage-types
                        - include: else-pop
                - match: '"'
                  scope: punctuation.definition.string.begin.cfml
                  set:
                    -   - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
                        - match: '"'
                          scope: punctuation.definition.string.end.cfml
                          pop: true
                    -   - include: scope:source.cfml.script#storage-types
                        - include: else-pop
                - match: (?=[A-Za-z0-9\-_.$])
                  set:
                    -   - meta_scope: meta.string.unquoted.cfml string.unquoted.cfml
                        - include: immediately-pop
                    -   - include: scope:source.cfml.script#storage-types
                        - include: else-pop
                - include: else-pop
            - include: else-pop
        - include: tag-generic-attribute

  cffunction-end-invalid:
    - match: (?i)(</)(cffunction)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
        3: punctuation.definition.tag.end.cfml

  cffunction-end-pop:
    - match: (?i)(</)(cffunction)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.function.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true

  cfoutput:
    - match: (?i)(<)(cfoutput)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        - meta_scope: meta.tag.cfml
        - match: '>'
          scope: punctuation.definition.tag.end.cfml
          set:
            - meta_content_scope: meta.scope.cfoutput.cfml text.html.cfml
            - include: cftag-end-pop
            - include: template-expression-html
        - include: tag-generic-attribute

  cfmail:
    - match: (?i)(<)(cfmail)\b
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        - meta_scope: meta.tag.cfml
        - match: '>'
          scope: punctuation.definition.tag.end.cfml
          set:
            - meta_content_scope: meta.scope.cfmail.cfml text.html.cfml
            - include: cftag-end-pop
            - include: template-expression-html
        - include: tag-generic-attribute

  cftag-end-pop:
    - match: (?i)(</)(cf[a-z]+)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true

  template-expression-html:
    - match: (?=\S)
      push:
        - include: scope:text.html.basic
      with_prototype:
        - match: (?i)(?=</cf(output|mail)>)
          pop: true
        - include: template-expression
        - include: cfmltags

  cfproperty:
    - match: (?i)(<)(cfproperty)\b
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        - meta_scope: meta.tag.cfml meta.tag.property.cfml
        - match: /?>
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: cfproperty-attributes

  cfproperty-attributes:
    - match: (?i:\b(?:name)\b)
      scope: entity.other.attribute-name.cfml
      push:
        - match: '='
          scope: punctuation.separator.key-value.cfml
          set:
            - match: "'"
              scope: punctuation.definition.string.begin.cfml
              set:
                -   - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
                    - match: "'"
                      scope: punctuation.definition.string.end.cfml
                      pop: true
                -   - meta_content_scope: meta.tag.property.name.cfml
                    - match: "''"
                      scope: constant.character.escape.quote.cfml
                    - match: (?=')
                      pop: true
            - match: '"'
              scope: punctuation.definition.string.begin.cfml
              set:
                -   - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
                    - match: '"'
                      scope: punctuation.definition.string.end.cfml
                      pop: true
                -   - meta_content_scope: meta.tag.property.name.cfml
                    - match: '""'
                      scope: constant.character.escape.quote.cfml
                    - match: (?=")
                      pop: true
            - match: (?=[A-Za-z0-9\-_.$])
              set:
                -   - meta_scope: meta.string.unquoted.cfml string.unquoted.cfml
                    - include: immediately-pop
                -   - meta_scope: meta.tag.property.name.cfml
                    - match: (?=[^A-Za-z0-9\-_.$])
                      pop: true
            - include: else-pop
        - include: else-pop
    - include: tag-generic-attribute

  cfargument:
    - match: (?i)(<)(cfargument)\b
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        - meta_scope: meta.tag.cfml meta.tag.argument.cfml
        - match: (/?>)
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: tag-generic-attribute

  cfquery:
    - match: (?i)(<)(cfquery)\b
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        -   - match: (?i)(</)(cfquery)(>)
              captures:
                0: meta.tag.cfml
                1: punctuation.definition.tag.begin.cfml
                2: entity.name.tag.cfml.end
                3: punctuation.definition.tag.end.cfml
              pop: true
        -   - meta_scope: meta.tag.cfml
            - match: '>'
              scope: punctuation.definition.tag.end.cfml
              set:
                - meta_content_scope: meta.scope.cfquery.cfml source.sql
                - include: scope:source.sql
              with_prototype:
                - match: (?i)(?=</cfquery>)
                  pop: true
                - include: comments
                - include: sql-character-escape
                - include: sql-template-expression
                - include: cfmltags
            - include: tag-generic-attribute

  cfscript:
    - match: (?i)(<)(cfscript)\b
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        - meta_scope: meta.tag.cfml
        - match: '>'
          scope: punctuation.definition.tag.end.cfml
          set:
            - meta_content_scope: source.cfml.script
            - match: (?i)(</)(cfscript)(>)
              captures:
                0: meta.tag.cfml
                1: punctuation.definition.tag.begin.cfml
                2: entity.name.tag.cfml
                3: punctuation.definition.tag.end.cfml
              pop: true
            - include: scope:source.cfml.script
        - match: \S
          scope: invalid.illegal.attribute-name.cfml

  tags-with-script:
    - match: (?i)(<)(cfset|cfreturn|cfif|cfelseif)\b
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        - meta_content_scope: meta.tag.cfml source.cfml.script
        - match: (/?>)
          scope: meta.tag.cfml punctuation.definition.tag.end.cfml
          pop: true
        - match: \bvar\b
          scope: storage.type.cfml
          push: scope:source.cfml.script.tags#expression-statement
        - match: (?=\S)
          push: scope:source.cfml.script.tags#expression-statement

  generic-tag:
    - match: (?i)(<)(cf[a-z]+)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      push:
        - meta_scope: meta.tag.cfml
        - match: (/?>)
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: tag-generic-attribute
    - match: (?i)(</)(cf[a-z]+)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
        3: punctuation.definition.tag.end.cfml

  comments:
    - match: <!---
      scope: punctuation.definition.comment.cfml
      push:
        - meta_scope: comment.block.cfml
        - match: '--->'
          scope: punctuation.definition.comment.cfml
          pop: true
        - include: comments

  template-expression:
    - match: '##'
      scope: constant.character.escape.hash.cfml
    - match: (&(##)[xX])(\h+)(;)
      scope: constant.character.entity.hexadecimal.html
      captures:
        1: punctuation.definition.entity.html
        2: constant.character.escape.hash.cfml
        4: punctuation.definition.entity.html
    - match: (&(##))([0-9]+)(;)
      scope: constant.character.entity.decimal.html
      captures:
        1: punctuation.definition.entity.html
        2: constant.character.escape.hash.cfml
        4: punctuation.definition.entity.html
    - match: '#'
      scope: punctuation.definition.template-expression.begin.cfml
      push:
        - match: '#'
          scope: punctuation.definition.template-expression.end.cfml
          pop: true
        - match: (?=.|\n)
          push:
            - meta_content_scope: source.cfml.script
            - include: template-expression-contents

  template-expression-set:
    - match: '##'
      scope: constant.character.escape.hash.cfml
    - match: '#'
      scope: punctuation.definition.template-expression.begin.cfml
      set:
        - match: '#'
          scope: punctuation.definition.template-expression.end.cfml
          pop: true
        - match: (?=.|\n)
          push:
            - meta_content_scope: source.cfml.script
            - include: template-expression-contents

  sql-template-expression:
    - match: '##'
      scope: constant.character.escape.hash.cfml
    - match: '#'
      scope: punctuation.definition.template-expression.begin.cfml
      push:
        - match: '#'
          scope: punctuation.definition.template-expression.end.cfml
          pop: true
        - match: (?=.|\n)
          push:
            - clear_scopes: 1
            - meta_content_scope: source.sql source.cfml.script
            - include: template-expression-contents

  sql-character-escape:
    - match: \\(?=#)
      scope: constant.character.escape.sql

  string-template-expression:
    - match: '##'
      scope: constant.character.escape.hash.cfml
    - match: '#'
      scope: punctuation.definition.template-expression.begin.cfml
      push:
        - match: '#'
          scope: punctuation.definition.template-expression.end.cfml
          pop: true
        - match: (?=.|\n)
          push:
            - clear_scopes: 1
            - meta_content_scope: source.cfml.script
            - include: template-expression-contents

  template-expression-contents:
    - match: (?=#)
      pop: true
    - include: scope:source.cfml.script#comments
    - match: (?=\S)
      push: scope:source.cfml.script#expression

  custom-tags:
    - match: (?i)(<)(cf_[a-z\-_]*)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.custom.cfml
      push:
        - meta_scope: meta.tag.custom.cfml
        - match: /?>
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: tag-generic-attribute
    - match: (?i)(</)(cf_[a-z\-_]*)(>)
      captures:
        0: meta.tag.custom.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.custom.cfml
        3: punctuation.definition.tag.end.cfml
    - match: (?i)(<)([a-z]+)(\:)([a-z\-_]*)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.custom.cfml
        3: entity.name.tag.custom.cfml punctuation.separator.prefix.cfml
        4: entity.name.tag.custom.cfml
      push:
        - meta_scope: meta.tag.custom.cfml
        - match: /?>
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: tag-generic-attribute
    - match: (?i)(</)([a-z]+\:[a-z\-_]*)(>)
      captures:
        0: meta.tag.custom.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.custom.cfml
        3: punctuation.definition.tag.end.cfml

  extension-tags:
    - match: (?i)(<)(cfx_[a-z\-_]*)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.extension.cfml
      push:
        - meta_scope: meta.tag.extension.cfml
        - match: /?>
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: tag-generic-attribute
    - match: (?i)(</)(cfx_[a-z\-_]*)(>)
      captures:
        0: meta.tag.extension.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.extension.cfml
        3: punctuation.definition.tag.end.cfml

  string:
    - match: "'"
      scope: punctuation.definition.string.begin.cfml
      set: string-content-single
    - match: '"'
      scope: punctuation.definition.string.begin.cfml
      set: string-content-double

  string-content-single:
    - meta_scope: meta.string.quoted.single.cfml string.quoted.single.cfml
    - match: "''"
      scope: constant.character.escape.quote.cfml
    - match: "'"
      scope: punctuation.definition.string.end.cfml
      pop: true
    - include: string-template-expression

  string-content-double:
    - meta_scope: meta.string.quoted.double.cfml string.quoted.double.cfml
    - match: '""'
      scope: constant.character.escape.quote.cfml
    - match: '"'
      scope: punctuation.definition.string.end.cfml
      pop: true
    - include: string-template-expression

  tag-generic-attribute:
    - include: comments
    - match: \b{{attribute_name}}\b
      scope: entity.other.attribute-name.cfml
      push:
        - match: '='
          scope: punctuation.separator.key-value.cfml
          set:
            - include: string
            - match: (?=[^\s</>{;])
              set:
                - meta_scope: meta.string.unquoted.cfml string.unquoted.cfml
                - match: (?=[\s</>{;])
                  pop: true
                - include: string-template-expression
            - include: else-pop
        - include: else-pop
    - match: \S
      scope: invalid.illegal.attribute-name.cfml
