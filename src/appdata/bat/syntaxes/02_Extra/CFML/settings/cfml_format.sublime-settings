// Your setting overrides go in "Packages/User/cfml_format.sublime-settings"
//
// These settings can also be specified in a `.sublime-project` file under a `cfml_format` key.
// e.g. { "cfml_format": { "brackets.padding": "spaced", etc... } }
// Project settings are merged with settings from your `.sublime-settings` files.
{
	// if true, prints the time each pass took to the console
	"log_command_times": false,

	// brackets are used in access by key or index: `obj["key"]`, `arr[index]`
	// array padding/spacing is set below in the `array` settings object
	// valid options are "compact" and "spaced"
	"brackets.padding": "compact",
	"brackets.padding_strip_newlines": true,

	// parentheses spacing only affects parentheses used to group expressions
	// it does not apply to parentheses used with keywords or function definitions and calls
	// valid options are "compact" and "spaced"
	"parentheses.padding": "compact",
	"parentheses.padding_strip_newlines": false,

	// applies to operators that operate on two operands such as =,+,-,/,*,%,&,&&,||,==,!=, etc.
	// valid options are "compact" and "spaced"
	"binary_operators.padding": "spaced",
	"binary_operators.padding_strip_newlines": false,

	// set to false to prevent the formatter from changing the spacing around assignments,
	// for instance where assignments on sequential lines are aligned
	"binary_operators.format_assignment_operator": true,

	// this is an experimental setting that will align the `=` in assignment
	// statements on sequential lines to each other
	"binary_operators.align_sequential_assignments": false,

	// semicolon spacing in a for loop group - `for (var i=1;i<=10;i++)` or `for (var i=1; i<=10; i++)`
	// valid options are "compact" and "spaced"
	"for_loop_semicolons.padding": "spaced",

	// Keyword formatting applies to keywords such as `if`, `else`, `else if`, `for`, `do`, `while`, `try`, `catch`.
	// If you null a setting, or set it to something other than a valid option, that formatting will not be applied.
	// You can apply settings to a specific keyword by cloning the settings below and adding the keyword as a subkey.
	// For example, `"keywords.for.block_to_keyword_spacing": "spaced"`

	// normalizes the space before the keyword to the previous block it continues - e.g. `}else`, `} else`, or `}\nelse`
	// valid options are "newline", "spaced" or "compact" - only applies to `else`, `else if`, `while`, `catch`
	"keywords.block_to_keyword_spacing": "spaced",

	// normalizes the space before the keyword to the previous line of code
	// valid options are "newline" and "emptyline" - applies to anything other than a comment
	"keywords.to_keyword_spacing": null,

	// normalizes the space from the keyword to the following group - e.g. `for (` or `for(`
	// valid options are "compact" and "spaced"
	"keywords.spacing_to_group": "spaced",

	// normalizes the space from the keyword to the following block - e.g. `try {`, `try{`, or `try\n{`
	// valid options are "newline", "spaced" or "compact"
	"keywords.spacing_to_block": "spaced",

	// normalizes the space inside an empty group - e.g. `for ()` or `for ( )`
	// valid options are "compact" and "spaced"
	"keywords.empty_group_spacing": "compact",

	// normalizes the padding inside a non empty group - e.g. `if (true)` or `if ( true )`
	// valid options are "compact" and "spaced"
	"keywords.padding_inside_group": "compact",

	// affects the above setting - should newlines be stripped from beginning and end of group
	// never ignored, truthy value - set `padding_inside_group` to null to avoid formatting
	"keywords.padding_strip_newlines": false,

	// normalizes the space from a keyword group to its block - e.g. `if (true) {`, `if (true){`, or `if (true)\n{`
	// valid options are "newline", "spaced" or "compact"
	"keywords.group_to_block_spacing": "spaced",


	// Block formatting
	// If you null a setting, or set it to something other than a valid option, that formatting will not be applied.
	// You can apply settings to a specific block type by cloning the settings below and using a block type as a subkey.
	// For example, `"blocks.function.empty_spacing": "emptyline"`

	// valid options are "spaced", "compact", "newline" and "emptyline"
	// `{}`, `{ }`, `{\n}`, or `{\n\n}`
	"blocks.empty_spacing": "newline",

	// valid options are "newline" and "emptyline"
	// `{\n` or `{\n\n`
	"blocks.start_spacing": "newline",

	// valid options are "newline" and "emptyline"
	// `\n}` or `\n\n}`
	"blocks.end_spacing": "newline",

	// valid options are "newline" and "emptyline"
	// `}\n` or `}\n\n`
	"blocks.after_block_spacing": null,


	// Comma delimited scopes
	// The `multiline.element_count` setting, and the `singleline_max_col` setting
	// are used to determine when to render these inline or over multiple lines.
	// due to how the formatter computes whether to render these inline or multiline,
	// whitespace settings cannot be ignored, and anything other than `spaced`
	// will be treated as `compact`.

	"singleline_max_col": 140,

	// valid options are "compact" and "spaced"
	// `{}` or `{ }`
	"struct.empty_spacing": "compact",

	// valid options are "compact" and "spaced"
	// `{key: value}` or `{ key: value }`
	"struct.padding_inside": "compact",

	// valid options are "compact" and "spaced"
	// `key:value` or `key: value`
	"struct.key_value_colon": "spaced",

	// valid options are "compact" and "spaced"
	// `key=value` or `key = value`
	"struct.key_value_equals": "spaced",

	// valid options are "compact" and "spaced"
	// `{key: value,otherkey: othervalue}` or `{key: value, otherkey: othervalue}`
	"struct.after_comma_spacing": "spaced",

	// split onto multiple lines when there are at least this many elements
	"struct.multiline.element_count": 4,
	// if the size of the struct rendered inline is less than this, then it will
	// always being rendered inline, no matter how many elements it has
	"struct.multiline.min_length": 40,
	// when rendering over multiple lines should the comma come at the beginning
	// or the end of a line
	"struct.multiline.leading_comma": false,

	// valid options are "compact" and "spaced"
	// `[]` or `[ ]`
	"array.empty_spacing": "compact",

	// valid options are "compact" and "spaced"
	// `[1]` or `[ 1 ]`
	"array.padding_inside": "compact",

	// valid options are "compact" and "spaced"
	// `[1,2]` or `[1, 2]`
	"array.after_comma_spacing": "spaced",

	// split onto multiple lines when there are at least this many elements
	"array.multiline.element_count": 4,
	// if the size of the array rendered inline is less than this, then it will
	// always being rendered inline, no matter how many elements it has
	"array.multiline.min_length": 40,
	// when rendering over multiple lines should the comma come at the beginning
	// or the end of a line
	"array.multiline.leading_comma": false,


	// valid options are "compact" and "spaced"
	// `function name()` or `function name( )`
	"function_declaration.empty_spacing": "compact",

	// valid options are "compact" and "spaced"
	// `function name(param)` or `function name( param )`
	"function_declaration.padding_inside": "compact",

	// valid options are "compact" and "spaced"
	// `function name(param1,param2)` or `function name(param1, param2)`
	"function_declaration.after_comma_spacing": "spaced",

	// valid options are "compact" and "spaced"
	// `function name()` vs `function name ()`
	"function_declaration.spacing_to_group": "compact",

	// valid options are "compact", "spaced", and "newline"
	// `function name(){`, `function name() {`, or `function name()\n{`
	"function_declaration.group_to_block_spacing": "spaced",

	// split onto multiple lines when there are at least this many elements
	"function_declaration.multiline.element_count": 4,
	// if the size of the function param region rendered inline is less than this,
	// then it will always being rendered inline, no matter how many elements it has
	"function_declaration.multiline.min_length": 40,
	// when rendering over multiple lines should the comma come at the beginning
	// or the end of a line
	"function_declaration.multiline.leading_comma": false,

	// valid options are "compact" and "spaced"
	// `call()` or `call( )`
	"function_call.empty_spacing": "compact",

	// valid options are "compact" and "spaced"
	// `call( arg )` or `call( arg )`
	"function_call.padding_inside": "compact",

	// valid options are "compact" and "spaced"
	// `call(arg1,arg2)` or `call(arg1, arg2)`
	"function_call.after_comma_spacing": "spaced",

	// split onto multiple lines when there are at least this many elements
	"function_call.multiline.element_count": 4,
	// if the size of the function call args region rendered inline is less than this,
	// then it will always being rendered inline, no matter how many elements it has
	"function_call.multiline.min_length": 40,
	// when rendering over multiple lines should the comma come at the beginning
	// or the end of a line
	"function_call.multiline.leading_comma": false,

	// renders a method chain on multiple lines if the method chain length is greater than
	// `singleline_max_col` above or if there are more methods in the chain than the
	// `break_after` setting, or if any newlines are contained in any method's parameters
	// if the method chain will break onto multiple lines `inline` specifies how many method
	// calls to put on the first line
	"method_chains.break_after": 2,
	"method_chains.inline": 1,

	// sort component properties
	// set to null to disable or "name" to sort
	// don't enable this if you have comments documenting your properties as they currently
	// won't get included in the sort
	"component_properties.sort_by": null,

	// converts all strings to the quote type specified
	// valid options are "double" and "single"
	// set to null to disable
	"normalize_strings.script": "single",

	// valid options are "double" and "single"
	// set to null to disable
	"normalize_strings.script-tag-attributes": "double",

	// normalizes all builtin function casing
	// e.g. converts `ARRAYAPPEND()` -> `arrayAppend()`
	// set to "cfdocs" to match the casing specified in cfdocs.org data
	// set to null to disable
	"normalize_builtin_functions": "cfdocs"
}
